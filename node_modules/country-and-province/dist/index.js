"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Province = exports.Country = exports.Provinces = exports.Countries = void 0;
const countries = require("country-list/data.json");
const countryAlts = require("./country-alts.json");
const provinces = require("provinces/provinces.json");
// Map additional data and conform data to standard format, forcing immutability.
const countryData = countries.map((val) => {
    return Object.freeze({
        alt: Object.freeze(countryAlts[val.code]),
        ...val
    });
});
const provinceData = provinces.map((val) => {
    return Object.freeze({
        name: val.name,
        code: val.short,
        countryCode: val.country,
        alt: Object.freeze(val.alt),
        region: val.region
    });
});
Object.freeze(countryData);
Object.freeze(provinceData);
// Helper functions
/** Compare two words to each other exactly. */
function compareExact(word1, word2) {
    return typeof word1 !== 'undefined' && typeof word2 !== 'undefined' && word1.toLowerCase() === word2.toLowerCase();
}
/** Search for a worf within an array of words. */
function alternateNameSearch(word, words) {
    return typeof word !== 'undefined' && Array.isArray(words) && typeof words.find((val) => compareExact(val, word)) !== 'undefined';
}
// Classes
/** Static class for country lookups. */
class Countries {
    /** Immutable data member. */
    static get data() {
        return countryData;
    }
    /** Lookup country data by name. */
    static byName(name) {
        return new Country(Countries.data.find((val) => {
            return compareExact(name, val.name) || alternateNameSearch(name, val.alt);
        }));
    }
    /** Lookup country data by country code. */
    static byCode(code) {
        return new Country(Countries.data.find((val) => compareExact(code, val.code)));
    }
}
exports.Countries = Countries;
/** Class for looking up province data. */
class Provinces {
    /** Create an instance of Provinces narrowed by country code. */
    constructor(countryCode) {
        this.data = Provinces.data.filter((val) => compareExact(countryCode, val.countryCode));
        this.countryCode = countryCode;
    }
    /** Lookup province by name. */
    byName(name) {
        return new Province(Provinces.data.find((val) => {
            return compareExact(name, val.name) || alternateNameSearch(name, val.alt);
        }));
    }
    /** Lookup province by province/state code. */
    byCode(code) {
        return new Province(this.data.find((val) => compareExact(code, val.code)));
    }
    /** Lookup province by name or by code. */
    byNameOrCode(nameOrCode) {
        return new Province(this.data.find((val) => {
            return compareExact(nameOrCode, val.name) || alternateNameSearch(nameOrCode, val.alt) || compareExact(nameOrCode, val.code);
        }));
    }
    /** Immutable data member. */
    static get data() {
        return provinceData;
    }
    /** Lookup province by name; returns the first matching province in the case of overlap. */
    static byName(name) {
        return new Province(Provinces.data.find((val) => {
            return compareExact(name, val.name) || alternateNameSearch(name, val.alt);
        }));
    }
    /** Lookup province by code; returns the first matching province in the case of overlap. */
    static byCode(code) {
        return new Province(Provinces.data.find((val) => compareExact(code, val.code)));
    }
    /** Lookup an array of provinces by country code. */
    static byCountryCode(countryCode) {
        return Provinces.data
            .filter((val) => compareExact(countryCode, val.countryCode))
            .map((val) => new Province(val));
    }
}
exports.Provinces = Provinces;
/** Class for creating an instance describing Country data. */
class Country {
    constructor(nameOrCode) {
        this.name;
        this.code;
        this.alt;
        if (typeof nameOrCode === 'string') {
            const result = Countries.data.find((val) => {
                return compareExact(nameOrCode, val.name) || alternateNameSearch(nameOrCode, val.alt) || compareExact(nameOrCode, val.code);
            });
            Object.assign(this, result);
        }
        else {
            Object.assign(this, nameOrCode);
        }
        if (this.code) {
            this.provinces = new Provinces(this.code);
        }
    }
    /** Lookup province by name. */
    provinceByName(name) {
        return this.provinces.byName(name);
    }
    /** Lookup province by province/state code. */
    provinceByCode(code) {
        return this.provinces.byCode(code);
    }
    /** Lookup province by name or by code. */
    provinceByNameOrCode(nameOrCode) {
        return this.provinces.byNameOrCode(nameOrCode);
    }
}
exports.Country = Country;
/** Class for creating an instance describing Province data. */
class Province {
    constructor(nameOrCode) {
        this.name;
        this.code;
        this.countryCode;
        this.alt;
        this.region;
        if (typeof nameOrCode === 'string') {
            const result = Provinces.data.find((val) => {
                return compareExact(nameOrCode, val.name) || alternateNameSearch(nameOrCode, val.alt) || compareExact(nameOrCode, val.code);
            });
            Object.assign(this, result);
        }
        else {
            Object.assign(this, nameOrCode);
        }
        if (this.countryCode) {
            this.country = Countries.byCode(this.countryCode);
        }
    }
}
exports.Province = Province;
